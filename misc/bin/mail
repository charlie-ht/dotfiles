#!/usr/bin/env python3
# -*- mode: python -*-
"""
This is a module docstring

TODO:

core_pattern
core_%e

"""

import sys
import os
import subprocess
import locale
import re
import multiprocessing
import urllib.request
import gzip

g_tld = os.path.expanduser("~/devenv")
g_srcdir = os.path.join(g_tld, "sources")
g_sysroot = os.path.join(g_tld, "sysroot")
g_num_cpus = multiprocessing.cpu_count()
if g_num_cpus > 10:
    g_num_background_cpus = int(g_num_cpus / 2)
elif g_num_cpus > 2:
    g_num_background_cpus = int(g_num_cpus / 4) + 1
else:
    g_num_background_cpus = 1


def bye(code=1):
    print("bye!")
    sys.exit(code)

def usage():
    print("\nMail manager")
    print("=======================")
    print("available subcommands:")
    print("\tdownload-archive url")
    print("\t\tfetch the mailman archives from the given base url into the CWD")
    print("\t\tfor example: http://lists.buildroot.org/pipermail/buildroot/")
    print("\t\twould fetch all the individual gzip'd archives and decompress them")

def run_process_and_return_output(args, trim=False, cwd=None):
    try:
        completed_process = subprocess.run(args,
                                           stdout=subprocess.PIPE,
                                           stderr=subprocess.STDOUT,
                                           check=True,
                                           cwd=cwd,
                                           encoding=locale.getpreferredencoding())
    except subprocess.CalledProcessError as ex:
        print("ERROR(process): Command failed|\n>>>| " + ' '.join(ex.cmd))
        print("ERROR(process): Output|\n>>>|", end='')
        print(ex.output.replace("\n", "\n>>>| "))
        bye()

    if trim:
        return completed_process.stdout.strip()
    else:
        return completed_process.stdout


def download_mailman_archives(top):
    month_names = ["January", "Feburary", "March", "April", "May", "June", "July", "August", "Sepetember", "October", "November", "December"]

    for year in range(2006,2020):
        for month in month_names:
            try:
                filename = f'{str(year)}-{month}.txt'
                print(f"downloading {filename}....", end='')
                with urllib.request.urlopen(os.path.join(top, filename + '.gz')) as response:
                    with open(filename, 'w+b') as f:
                        f.write(gzip.decompress(response.read()))
                print("success")
            except:
                print("failed")
                continue

def run():
    if len(sys.argv) == 1:
        usage()
        bye()

    # E.g. 'http://lists.busybox.net/pipermail/buildroot/'
    if sys.argv[1] == 'download-archive':
        download_mailman_archives(sys.argv[2])
    else:
        print("unknown command: "+sys.argv[1])
        bye()

if __name__ == '__main__':
    run()
