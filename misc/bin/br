#!/usr/bin/env python3
# -*- mode: python -*-

"""
This is a module docstring

TODO:

core_pattern
core_%e

"""

import sys
import os
import subprocess
import locale
import re
import json


def bye(code=1):
    print("bye!")
    sys.exit(code)


def usage():
    print("\nBuildroot helper script")
    print("=======================")
    print("available subcommands:")

    print("\texamine-core [core-file]")
    print("\t\tloads up the core file, taking care to call GDB fruitful "
          "incantations")
    print("\t\tcore-file defaults to `core`")

    print("\tredeploy_usr")
    print("\t\tcopies changes from buildroot to target usr in /exports/buildroot")

    print("\tlist-libs exe")
    print("\t\tshow the runtime dependencies of exe")



def run_process_and_return_output(args):
    completed_process = subprocess.run(args,
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT,
                                       check=True,
                                       encoding=locale.getpreferredencoding())
    return completed_process.stdout


def get_executable_name_from_core_file(core_file_path):
    output = run_process_and_return_output(["file", core_file_path])

    match = re.findall(r"execfn: '([^']+)'", output)
    if not match:
        print("core file not in a recognised format,"
              " failed to find executable name")
        bye()
    executable_name = os.path.basename(match[0])
    return executable_name


def examine_core_file(args):
    if len(args) == 0:
        core_file_path = "core"
    else:
        core_file_path = args[0]

    print(f"examining `{core_file_path}`...")
    br_gdb_path = os.path.join(BR_OUTPUT_DIR,
                               "host/bin/arm-buildroot-linux-gnueabihf-gdb")
    br_gdb_init_file = os.path.join(BR_OUTPUT_DIR,
                                    "staging/usr/share/buildroot/gdbinit")

    executable_name = get_executable_name_from_core_file(core_file_path)
    print(executable_name)
    if re.match("WPE*", executable_name):
        executable_path = \
            os.path.join(BR_OUTPUT_DIR,
                         f"build/wpewebkit-custom/bin/{executable_name}")
    else:
        executable_path = ""
        print(f"{executable_name} is not in my wheelhouse")
        bye()

    subprocess.run([br_gdb_path, "-x", br_gdb_init_file,
                    executable_path, core_file_path], check=True)


def redeploy_usr():
    subprocess.run(["sudo", "rsync", "-av", "--chown", "root:root",
                    os.path.join(BR_OUTPUT_DIR, "target/usr/lib/"),
                    "/exports/buildroot/usr/lib/"], check=True)

def list_libs(args):
    if len(args) == 0:
        print("requires an executable filename as argument")
        bye()
    exe = args[0]
    
    output = run_process_and_return_output([f"{CROSS_TOOL_PREFIX}readelf", "-a", exe])

    print(output)

def flash_sd(args):
    sdcard_img = os.path.join(IMAGES_DIR, "sdcard.img")
    if not os.path.exists(sdcard_img):
        print("no SD card image")
        bye()

    def is_mmc_mounted():
        output = json.loads(run_process_and_return_output(["lsblk", "-fJ", "/dev/mmcblk0"]))
        for bd in output['blockdevices']:
            if bd['name'] == 'mmcblk0':
                for part in bd['children']:
                    if part['mountpoint'] is not None:
                        print(f"{part['name']} has a filesystem mount, unmount them all before doing this!")
                        return True
        return False

    if is_mmc_mounted():
        bye()

    print(f"Flashing {sdcard_img} to /dev/mmcblk0....")
    output = run_process_and_return_output(["sudo", "dd", "if=" + sdcard_img, "of=/dev/mmcblk0", "conv=fsync", "status=progress"])

def setup_project_globals(project):
    global BR_TOP_LEVEL_DIR
    global BR_OUTPUT_DIR
    global IMAGES_DIR
    global CROSS_TOOLS_DIR
    global CROSS_TOOL_PREFIX

    if project.startswith("met"):
        BR_TOP_LEVEL_DIR = os.path.expanduser("~/igalia/metrological/repos/buildroot")
    else:
        BR_TOP_LEVEL_DIR = os.path.expanduser("~/igalia/buildroot")

    BR_OUTPUT_DIR = os.path.join(BR_TOP_LEVEL_DIR, "output")
    IMAGES_DIR = os.path.join(BR_OUTPUT_DIR, "images")
    CROSS_TOOLS_DIR = os.path.join(BR_TOP_LEVEL_DIR, "host/usr/bin")
    CROSS_TOOL_PREFIX = os.path.join(CROSS_TOOLS_DIR, "arm-buildroot-linux-gnueabihf-")


def run():
    if len(sys.argv) < 2:
        usage()
        bye()


    project = sys.argv[1]
    setup_project_globals(project)


    sub_command = sys.argv[2]
    if sub_command == "examine-core":
        examine_core_file(sys.argv[2:])
    if sub_command == "redeploy-usr":
        redeploy_usr()
    if sub_command == "list-libs":
        list_libs(sys.argv[2:])
    if sub_command == "flash-sd":
        flash_sd(sys.argv[2:])
    else:
        print(f"unknown command: {sys.argv[1]}")


if __name__ == '__main__':
    run()
